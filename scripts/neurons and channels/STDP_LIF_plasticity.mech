% excitatory AMPA synapse expresses STDP
% the STDP change initialy impacts W but extends its influence on P

% AMPA synaptic parameters
gAmpa = 0.1       % mS/cm2, maximal conductance
EAMPA = [0]         % mV, reversal potential
tauAMPAr = [0.4]   
tauAMPAd = [4]
IC = 0
IC_noise = [0]

% Network Connectivity
N_syn=1
netcon=ones(N_pre, N_post) % default connectivity matrix is all-to-all

% Fast rise phase (timescale tauAMPAr)
dz/dt = -z / tauAMPAr + sum( (t - tspike_pre > 0) .* exp(-(t - tspike_pre)/tauAMPAr ))

% Slow decay phase (timescale tauAMPAd)
dsAMPA/dt = (z - sAMPA) / tauAMPAd

% note, i translated: f(x) = 1*(exp(-x/tauD) - exp(-x/tauR)) .* (x > 0)) 
% into the code above using an itermediate variable z.
% translating a function into a differential equation means that the diff will be integrated
% at every time point while solving the ODE system. this will result in linear growth of the
% diff, so -- you have to include the decaying term. (z grows, sAMPA decays)

% Initial conditions
sAMPA(0) = IC + IC_noise.*rand(1,N_pre)
z(0) = 0

% Synaptic conductance and currents
A = 5 % need to scale sAMPA
g_ampa(sAMPA) = gAmpa.*(sAMPA.*A)

IAMPA(X,w,sAMPA) = g_ampa(sAMPA)*(w.*netcon).*(X-EAMPA)

% STDP
taux=5
tauy=5
wmax=2.5
IC_w=1
rx=0.5 % LTP step
ry=0.5 % LTD step
alpha=20 % memory amplitude modulation
delay_pre=0
delay_post=0

heavyside_theta = @(x) double(x>0)

ax(x)=(1-x).*alpha % incremental increase in presynaptic trace with nearest-neighbor spike-interaction
ay(y)=(1-y).*alpha % incremental increase in postsynaptic trace
Ax(w)=heavyside_theta(wmax-w).*rx % hard bounds
Ay(w)=w*ry      % soft bounds
detection_interval = 1.1*dt
dx/dt=-x./taux+ax(x).*sum((t-tspike_pre-delay_pre)<detection_interval)
dy/dt=-y./tauy+ay(y).*sum((t-tspike_post-delay_post)<detection_interval)

dw/dt=Ax(w).*repmat(x,[N_post,1])'.*repmat(sum((t-tspike_post-delay_post)<detection_interval),[N_pre, 1]) - Ay(w).*repmat(y,[N_pre, 1]).*repmat(sum((t-tspike_pre-delay_pre)<detection_interval),[N_post,1])'

x(0)=zeros(1,N_pre); 
y(0)=zeros(1,N_post); 
w(0)=IC_w.*ones(N_pre,N_post)

monitor IAMPA % functions
@current += -IAMPA(X_post,w,sAMPA)