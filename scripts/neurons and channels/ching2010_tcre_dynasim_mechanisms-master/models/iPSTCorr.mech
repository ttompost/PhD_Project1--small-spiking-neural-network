% iPSTCorr = iPoissonSpiketrainCorr:
%     Produces synaptic exponential Poisson spiketrains which are based off of
%     a single one, where subsequent trains are made from "jittering" the spikes of
%     the original, in order to get a well-correlated series of spike trains
% Dependencies: Relies on "GeneratePoissonCorr.m" though I'm not sure if that file
%     needs to be in just your DNSIM path, or the database itself, or either.
% Usage: Use it as an autapse connection: e.g. "TC-TC".
% Reference: see Ben Poletta-Pittman. This was built using
%     "dend_iMultiPoissonExp.txt" and its dependency "multi_Poisson.m" as a
%     template, though I may have altered some of the "tau_XXX" time constants.
% Tags: synapse, connection
%
% Note that due to the weird EPSP waveform of the artificial AMPA spike train
%   generated by the following mechanism, the "activity variable" of each of the
%   AMPA spikes, which is usually from 0 to 1 in traditionaly neural modeling, is
%   NOT 0 to 1 but sometimes goes as high as 3. I have not yet recalibrated the
%   waveform to use unit-activity-variable, so for now, the `g_esyn` that is the
%   maximal conductance of the AMPAergic spikes is, in reality, somewhere up to 3x
%   the number you assign to `g_esyn`. In other words, the "real" conductance of
%   the current AMPA spikes are roughly 3x `g_esyn`, as a rule of thumb.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% what is going on with the rate and the time??? I have rate=2 and T=2000
% written down as producing 12 Hz, and that seems to be right, but how does that
% translate???

corr_rate = 12
T = 8000
g_esyn_corr = 1
E_esyn_corr = 1
tau_i_corr = 10
tau_1_corr = 1
N_einputs_corr = 1
corr_prob_cxn = 0.5
jitter_stddev_corr = 500

% Connectivity
% Randomly connected, with some probability of connection
netcon = rand(N_pre,N_post)<corr_prob_cxn

% Functions
% Npop is the number of source? or target? cells, though it doesn't matter
%     which in an autapse. So if TC=100, then Npop=100
Ge = GeneratePoissonCorr(N_pre, N_einputs_corr, corr_rate, tau_i_corr, tau_1_corr, 2, .5, T, dt, jitter_stddev_corr)
% Don't forget the new apostrophe, since DynaSim has rotated matrices from DNSIM
% What is to be multipled by `netcon` is, for some specific time `t`, a vector
%   1 x <some population/cell number>
IPSTCorr(X,t) = g_esyn_corr/N_pre.*((Ge(:,max(1,round(t/dt)))')*netcon).*(X-E_esyn_corr)

% Record all the things!
monitor IPSTCorr 

@current += -IPSTCorr(X,t)
