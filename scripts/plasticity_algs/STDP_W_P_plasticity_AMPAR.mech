% excitatory AMPA synapse expresses STDP
% the STDP change initialy impacts W but extends its influence on P

% AMPA synaptic parameters
gAmpa = 0.1       % mS/cm2, maximal conductance
EAMPA = [0]         % mV, reversal potential
tauAMPAr = [0.2]   
tauAMPAd = [4]

settling_time = 0 % ms
temp_switch = @(x) double(x>=settling_time)

% Network Connectivity
netcon=ones(N_pre, N_post) % default connectivity matrix is all-to-all

% ICs
y(0)=zeros(1,N_post); 

sAMPA1(0)=zeros(1,N_pre)
sAMPA2(0)=zeros(1,N_pre)

xSyn1(0)=zeros(1,N_pre); 
wSyn1(0)=ones(N_pre,N_post)
netcon1(0)=ones(N_pre,N_post)

xSyn2(0)=zeros(1,N_pre); 
wSyn2(0)=zeros(N_pre,N_post)
netcon2(0)=zeros(N_pre,N_post)

delaySyn1_pre=0
delaySyn2_pre=3
delay_post=0

% STDP params
newSynW=0.2
taux_d=4    % pre memory
taux_r=0.1  % pre memory
tauy_d=4    % post memory
tauy_r=0.1  % post memory
wmax=2.4
rx=0.15/dt % LTP step
ry=0.1/dt % LTD step

% Compute normalization factor for alpha
ratio_x = taux_r / taux_d;
exponent1x = taux_r / (taux_d - taux_r);
exponent2x = taux_d / (taux_d - taux_r);
peak_unscaled_x = ratio_x^exponent1x - ratio_x^exponent2x;
alpha_x = (taux_d - taux_r) / peak_unscaled_x * (taux_r + taux_d) / (taux_r * taux_d); % memory amplitude modulation, so that the memory trace is between 0 and 1

ratio_y = tauy_r / tauy_d;
exponent1y = tauy_r / (tauy_d - tauy_r);
exponent2y = tauy_d / (tauy_d - tauy_r);
peak_unscaled_y = ratio_y^exponent1y - ratio_y^exponent2y;
alpha_y = (tauy_d - tauy_r) / peak_unscaled_y * (tauy_r + tauy_d) / (tauy_r * tauy_d); % memory amplitude modulation, so that the memory trace is between 0 and 1

ratio = tauAMPAr / tauAMPAd;
exponent1 = tauAMPAr / (tauAMPAd - tauAMPAr);
exponent2 = tauAMPAd / (tauAMPAd - tauAMPAr);
peak_unscaled = ratio^exponent1 - ratio^exponent2;
alpha = (tauAMPAd - tauAMPAr) / peak_unscaled * (tauAMPAr + tauAMPAd) / (tauAMPAr * tauAMPAd); % memory amplitude modulation, so that the memory trace is between 0 and 1

% Shared functions
heavyside_theta = @(x) double(x>0)
g_syn(s) = gAmpa.*(s)

Ax(w)=heavyside_theta(wmax-w).*rx % hard bounds
Ay(w)=w*ry      % soft bounds
detection_interval = 10*dt

% Postsynaptic trace
dy/dt = -(1/tauy_r + 1/tauy_d) * y + alpha_y/(tauy_d - tauy_r) * sum( (t - tspike_post - delay_post > 0) .* ( exp(-(t - tspike_post - delay_post)/tauy_d) - exp(-(t - tspike_post - delay_post)/tauy_r) ) );

% Presynaptic spike detection
dsAMPA1/dt = -(1/tauAMPAr + 1/tauAMPAd) * sAMPA1 + alpha/(tauAMPAd - tauAMPAr) * sum( (t - tspike_pre - delaySyn1_pre > 0) .* ( exp(-(t - tspike_pre - delaySyn1_pre)/tauAMPAd) - exp(-(t - tspike_pre - delaySyn1_pre)/tauAMPAr) ) );
dsAMPA2/dt = -(1/tauAMPAr + 1/tauAMPAd) * sAMPA2 + alpha/(tauAMPAd - tauAMPAr) * sum( (t - tspike_pre - delaySyn2_pre > 0) .* ( exp(-(t - tspike_pre - delaySyn2_pre)/tauAMPAd) - exp(-(t - tspike_pre - delaySyn2_pre)/tauAMPAr) ) );

% Independent functions for all synaptic dimensions
% (1) Main layer
    % Presynaptic memory trace
dxSyn1/dt = -(1/taux_r + 1/taux_d) * xSyn1 + alpha_x/(taux_d - taux_r) * sum( (t - tspike_pre - delaySyn1_pre > 0) .* ( exp(-(t - tspike_pre - delaySyn1_pre)/taux_d) - exp(-(t - tspike_pre - delaySyn1_pre)/taux_r) ) );

    % Weight change
dwSyn1/dt=Ax(wSyn1).*repmat(xSyn1,[N_post,1])'.*repmat(sum((t-tspike_post-delay_post)<detection_interval),[N_pre, 1]) - Ay(wSyn1).*repmat(y,[N_pre, 1]).*repmat(sum((t-tspike_pre-delaySyn1_pre)<detection_interval),[N_post,1])'
    
    % Postsynaptic current
IAMPAsyn1(X,wSyn1,sAMPA1) = g_syn(sAMPA1)*(wSyn1.*double(sum(netcon1,1)~=0)).*(X-EAMPA) .* temp_switch(t)

% (2) First added layer
    % Presynaptic memory trace
dxSyn2/dt = -(1/taux_r + 1/taux_d) * xSyn2 + alpha_x/(taux_d - taux_r) * sum( (t - tspike_pre - delaySyn2_pre > 0) .* ( exp(-(t - tspike_pre - delaySyn2_pre)/taux_d) - exp(-(t - tspike_pre - delaySyn2_pre)/taux_r) ) );

    % Weight change
dwSyn2/dt=Ax(wSyn2).*repmat(xSyn2,[N_post,1])'.*repmat(sum((t-tspike_post-delay_post)<detection_interval),[N_pre, 1]) - Ay(wSyn2).*repmat(y,[N_pre, 1]).*repmat(sum((t-tspike_pre-delaySyn2_pre)<detection_interval),[N_post,1])'

    % Postsynaptic current
IAMPAsyn2(X,wSyn2,sAMPA2) = g_syn(sAMPA2)*(wSyn2.*double(sum(netcon2,1)~=0)).*(X-EAMPA) .* temp_switch(t)

% Track the synapse formation and elimination
dnetcon1/dt = (netcon1.*netcon)>0
dnetcon2/dt = (netcon2.*netcon)>0

% Conditions: btw, the brackets are in order (if)(then)(else)
    % synapse formation
if(wSyn1.*netcon>=wmax & sum(netcon2,3)==0)(wSyn2=newSynW, netcon2=1, disp('formed second')) % if a new synapse was added, start from its initial W

    % synapse elimination
if(wSyn2.*netcon<=0.01 & wSyn2.*netcon>0 & netcon2>0)(netcon2=0, disp('eliminated second'))
if(wSyn1.*netcon<=0.01 & wSyn1.*netcon>0 & netcon1>0)(netcon1=0, disp('eliminated first'))

    % synapse reformation
if(wSyn1.*netcon>=wmax & sum(netcon2,3)>0 & netcon2==0)(wSyn2=newSynW, netcon2=1, disp('reformed second'))
if(wSyn1.*netcon>=wmax & sum(netcon1,3)>0 & netcon1==0)(wSyn1=newSynW, netcon1=1, disp('reformed first'))


monitor IAMPAsyn1, IAMPAsyn2
@current += -IAMPAsyn1(X_post,wSyn1,sAMPA1)-IAMPAsyn2(X_post,wSyn2,sAMPA2)