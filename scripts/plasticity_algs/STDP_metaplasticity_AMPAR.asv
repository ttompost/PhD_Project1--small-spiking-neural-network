% excitatory AMPA synapse expresses STDP

% AMPA synaptic parameters
gAMPA = 0.1       % mS/cm2, maximal conductance
EAMPA = [0]         % mV, reversal potential
tauAMPAr = [0.2]   
tauAMPAd = [4]

settling_time = 0 % ms
temp_switch = @(x) double(x>=settling_time)

% Network Connectivity
netcon=ones(N_pre, N_post) % default connectivity matrix is all-to-all

% ICs
y(0)=zeros(1,N_post); 

sAMPA1(0)=zeros(1,N_pre)

xSyn1(0)=zeros(1,N_pre); 
wSyn1(0)=ones(N_pre,N_post)

delaySyn1_pre=0
delay_post=0

% STDP params
taux_d=4    % pre memory
taux_r=0.1  % pre memory
tauy_d=4    % post memory
tauy_r=0.1  % post memory

% Compute normalization factor for alpha
ratio_x = taux_r / taux_d;
exponent1x = taux_r / (taux_d - taux_r);
exponent2x = taux_d / (taux_d - taux_r);
peak_unscaled_x = ratio_x^exponent1x - ratio_x^exponent2x;
alpha_x = (taux_d - taux_r) / peak_unscaled_x * (taux_r + taux_d) / (taux_r * taux_d); % memory amplitude modulation, so that the memory trace is between 0 and 1

ratio_y = tauy_r / tauy_d;
exponent1y = tauy_r / (tauy_d - tauy_r);
exponent2y = tauy_d / (tauy_d - tauy_r);
peak_unscaled_y = ratio_y^exponent1y - ratio_y^exponent2y;
alpha_y = (tauy_d - tauy_r) / peak_unscaled_y * (tauy_r + tauy_d) / (tauy_r * tauy_d); % memory amplitude modulation, so that the memory trace is between 0 and 1

ratio = tauAMPAr / tauAMPAd;
exponent1 = tauAMPAr / (tauAMPAd - tauAMPAr);
exponent2 = tauAMPAd / (tauAMPAd - tauAMPAr);
peak_unscaled = ratio^exponent1 - ratio^exponent2;
alpha = (tauAMPAd - tauAMPAr) / peak_unscaled * (tauAMPAr + tauAMPAd) / (tauAMPAr * tauAMPAd); % memory amplitude modulation, so that the memory trace is between 0 and 1

% Shared functions
g_syn(s) = gAMPA.*(s)

% metaplasticity
Ax(w, b)=(w .* (0.05*tanh(b*0.8+1.4) - 0.05*tanh(b*0.8-1.4) + 0.01)/dt)  % LTP step is metaplastic
Ay(w, b)=w.*(0.06*tanh(b.*0.6+0.5)+0.07)/dt      % LTD step is metaplastic
detection_interval = 20*dt

% Postsynaptic trace
dy/dt = -(1/tauy_r + 1/tauy_d) * y + alpha_y/(tauy_d - tauy_r) * sum( (t - tspike_post - delay_post > 0) .* ( exp(-(t - tspike_post - delay_post)/tauy_d) - exp(-(t - tspike_post - delay_post)/tauy_r) ) );

% Presynaptic spike detection
dsAMPA1/dt = -(1/tauAMPAr + 1/tauAMPAd) * sAMPA1 + alpha/(tauAMPAd - tauAMPAr) * sum( (t - tspike_pre - delaySyn1_pre > 0) .* ( exp(-(t - tspike_pre - delaySyn1_pre)/tauAMPAd) - exp(-(t - tspike_pre - delaySyn1_pre)/tauAMPAr) ) );

% Independent functions for all synaptic dimensions
% (1) Main layer
    % Presynaptic memory trace
dxSyn1/dt = -(1/taux_r + 1/taux_d) * xSyn1 + alpha_x/(taux_d - taux_r) * sum( (t - tspike_pre - delaySyn1_pre > 0) .* ( exp(-(t - tspike_pre - delaySyn1_pre)/taux_d) - exp(-(t - tspike_pre - delaySyn1_pre)/taux_r) ) );

    % Weight change
dwSyn1/dt=[(Ax(wSyn1,balance).*repmat(xSyn1,[N_post,1])'.*repmat(sum((t-tspike_post-delay_post)<detection_interval),[N_pre, 1])) - 0.01.*(balance>4.5)] - Ay(wSyn1,balance).*repmat(y,[N_pre, 1]).*repmat(sum((t-tspike_pre-delaySyn1_pre)<detection_interval),[N_post,1])'
    
    % Postsynaptic current
IAMPAsyn1(X,wSyn1,sAMPA1) = -g_syn(sAMPA1)*(wSyn1.*netcon).*(X-EAMPA) .* temp_switch(t)

% E-I balance
balance(0)=zeros(1,N_post);
Mean_AMPA(0)=zeros(1,N_post);
Mean_GABA(0)=zeros(1,N_post);

% Define smoothed AMPA and GABA currents
dMean_AMPA/dt = (@IAMPAsyn - Mean_AMPA);
dMean_GABA/dt = (@IGABAasyn - Mean_GABA);

% this tracks the sum almost perfectly:
balance' = ((Mean_GABA + Mean_AMPA) - balance)/3

monitor IAMPAsyn1,b
@current += IAMPAsyn1(X_post,wSyn1,sAMPA1)

% expose IAMPAsyn1 for E-I balance calculation
@IAMPAsyn += IAMPAsyn1(X_post,wSyn1,sAMPA1)